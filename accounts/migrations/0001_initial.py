# Generated by Django 2.0.2 on 2018-05-26 09:26

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, unique=True)),
                ('patronymic', models.CharField(max_length=64)),
                ('is_doctor', models.BooleanField(default=False)),
                ('is_patient', models.BooleanField(default=False)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='user_avatars')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AgeGap',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.PositiveIntegerField()),
                ('end', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['start'],
            },
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Doctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skype', models.CharField(blank=True, max_length=256, null=True, unique=True, verbose_name='skype username')),
                ('skype_password', models.CharField(blank=True, max_length=128, null=True, verbose_name='skype password')),
                ('is_private', models.BooleanField(default=True)),
                ('accept_chat', models.BooleanField(default=True)),
                ('accept_call', models.BooleanField(default=True)),
                ('personal_address', models.CharField(blank=True, max_length=512, null=True, verbose_name="address if you don't work in clinic")),
                ('price_per_minute', models.FloatField(default=0.0)),
                ('seconds', models.IntegerField(default=0)),
                ('description', models.TextField(verbose_name='info about yourself')),
            ],
        ),
        migrations.CreateModel(
            name='DoctorSphere',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Hospital',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256, verbose_name='hospital name')),
                ('address', models.CharField(max_length=512, verbose_name='hospital address')),
                ('is_private', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('birthday', models.DateField()),
                ('skype', models.CharField(max_length=256, unique=True, verbose_name='skype username')),
                ('age_gap', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT, to='accounts.AgeGap', verbose_name='age gap')),
            ],
        ),
        migrations.CreateModel(
            name='PrivateDoctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour_rate', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='hour rate')),
                ('visit_price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='visit price')),
                ('doctor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.Doctor')),
            ],
        ),
        migrations.CreateModel(
            name='PublicDoctor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('doctor', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.Doctor')),
            ],
        ),
        migrations.CreateModel(
            name='Relationships',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('patient_accept', models.BooleanField(default=False)),
                ('doctor_accept', models.BooleanField(default=False)),
                ('doctor', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Doctor')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Patient')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField(verbose_name='comment')),
                ('mark', models.PositiveSmallIntegerField(validators=[django.core.validators.MaxValueValidator(100)], verbose_name='mark')),
                ('doctor_sphere', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.DoctorSphere')),
                ('patient', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='accounts.Patient')),
            ],
        ),
    ]
